@using CloneHabr.Dto.Requests;
@inject UserInfo userInfo
@inject HttpClient httpClient

<div class="card mt-3 mb-3 " >

    <div class="card-header">
        ID: @userDto.UserId, @userDto.Login
    </div>

    <div class="card-body">

        <span>
             @userDto.Role
        </span>
        <button class="btn-outline-primary " onclick="@UserRoleUp">
            <span class="oi oi-chevron-top"></span>
        </button>

        <button class="btn-outline-primary" onclick="@UserRoleDown">
            <span class="oi oi-chevron-bottom"></span>
        </button>

        <div style="@(!isUserBanned ? "display:block" : "display:none")">

            <span>
                <EditForm Model="innerModel">

                    дней бана:
                    <InputNumber @bind-Value ="@innerModel.banDays" />
                    <button class="btn btn-outline-primary" onclick="@BanUser">
                        <span class="oi oi-ban"> Забанить</span>
                    </button>
                </EditForm>

            </span>
        </div>

        <div style="@(isUserBanned ? "display:block" : "display:none")">
            <div class="alert alert-danger mt-3">

                пользователь забанен до @userDto.EndDateLocked
            </div>
        </div>
    </div>
</div>


@code {
    [Parameter]
    public UserDto userDto { get; set; }
    InnerModel innerModel = new();
    bool isUserBanned = false;

    protected override void OnInitialized()
    {
        if (userDto.EndDateLocked >= DateTime.Now)
        {
            isUserBanned = true;
        }
    }

    private async void BanUser()
    {
        if (innerModel.banDays > 0)
        {
            string uri = $"api/User/BanedUserById?userId={userDto.UserId}&banedDay={innerModel.banDays}";

            var response = await httpClient.GetFromJsonAsync<UserResponse>(uri);
            if (response.Status == Dto.Status.UserStatus.Success)
            {
                userDto = response.UserDto;
                isUserBanned = true;
                StateHasChanged();
            }
        }
    }

    private async void UserRoleUp()
    {
        if (userDto.Role + 1 < userInfo.Role && userDto.UserId != userInfo.UserId)
        {
            string uri = $"api/User/ChangeRoleUserById?userId={userDto.UserId}&role={++userDto.Role}";
            var response = await httpClient.GetFromJsonAsync<UserResponse>(uri);
            if (response.Status == Dto.Status.UserStatus.Success)
            {
                StateHasChanged();
            }
        }
    }

    private async void UserRoleDown()
    {
        if (userDto.Role - 1 >= Dto.@enum.Roles.StandartUser && userDto.UserId != userInfo.UserId)
        {
            string uri = $"api/User/ChangeRoleUserById?userId={userDto.UserId}&role={--userDto.Role}";
            var response = await httpClient.GetFromJsonAsync<UserResponse>(uri);
            if (response.Status == Dto.Status.UserStatus.Success)
            {
                StateHasChanged();
            }
        }
    }

    class InnerModel
    {
        public int banDays;
    }

}
